// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/

//@version=6
indicator("Volume Price Analysis Indicator", shorttitle="VPA", overlay=true, calc_bars_count=1000)

// User Inputs
showHammers = input.bool(true, title="Show Hammers")
showShooters = input.bool(true, title="Show Shooters")
hammerBodyToTotalRatio = input(2.0, title="Hammer/Shooter Long Wick to Body Multiplier", tooltip="Set the multiplier for the minimum lower wick to body ratio for identifying hammers and upper wick to body ratio for identifying shooters.")
shortWickToTotalRatio = input(0.15, title="Hammer/Shooter Short Wick to Total Multiplier", tooltip="Set the multiplier for the maximum upper wick to total candle range ratio for identifying hammers and lower wick to total candle range ratio for identifying shooters.")
reversalBarShortWick = input(0.35, title="Reversal Bar Short Wick to Body Multiplier", tooltip="Set the multiplier for the maximum short wick to body ratio for identifying reversal bars.")
showDojis = input.bool(true, title="Show Dojis")
dojiBodyToTotalRatio = input(0.10, title="Doji Body to Total Multiplier", tooltip="Set the maximum body to total candle range ratio for identifying doji candlesticks.")
showInsideBars = input.bool(true, title="Show Inside Bars")
showReversalBar = input.bool(true, title="Show Reversal Bars")
showHVAnomalies = input.bool(true, title="Show High Volume Anomalies")
showLVAnomalies = input.bool(true, title="Show Low Volume Anomalies")
acceptableVolumeThreshold = input(0.33, title="Acceptable Volume Threshold", tooltip="Set the minimum volume threshold as a multiple of the volume average (e.g., 0.33x volume average). Candlesticks with volume below this threshold will not display candlestick indications.")
volumeMetricLength = input.int(50, minval=10, maxval=500, title="Volume SMA Length", tooltip="Set the length for the volume SMA calculation.")
acceptableVolatilityThreshold = input(0.33, title="Acceptable Volatility Threshold", tooltip="Set the minimum volatility threshold as a multiple of the ATR (e.g., 0.5x ATR). Candlesticks with volatility below this threshold will not display candlestick indications.")
atrLength = input(14, title="ATR Length", tooltip="Set the length of the ATR calculation.")
showDailyGaps = input.bool(true, title="Show Daily Gaps")
usePartialFill = input.bool(false, title = "Use Partial Gap Filling", tooltip = "Enable to shrink gap boundaries as price fills them. Disable to keep gaps at their original boundaries until fully filled.")
gapLookback = input.int(200, minval=10, maxval=500, title="Gap Lookback", tooltip="Set the lookback period for identifying daily gaps.")
dailyGapColor = input(color.rgb(255, 255, 255, 95), title="Daily Gap Color")
dailyGapBorderColor = input(color.rgb(255, 255, 255, 30), title="Daily Gap Border Color")
dailyGapBorderWidth = input(2, title="Daily Gap Border Width", tooltip="Set the width of the border around daily gaps.")
plotPrevMonthHighLowClose = input.bool(true, title="Plot Previous Month High/Low/Close")
plotPrevWeekHighLowClose = input.bool(true, title="Plot Previous Week High/Low/Close")
plotPrevDayHighLowClose = input.bool(true, title="Plot Previous Day High/Low/Close")
plotMonthlyOpeningPrint = input.bool(true, title="Plot Monthly Opening Print")
plotWeeklyOpeningPrint = input.bool(true, title="Plot Weekly Opening Print")
plotDailyOpeningPrint = input.bool(true, title="Plot Daily Opening Print")
plotYearlyPivotLevels = input.bool(true, title="Plot Yearly Pivot Levels")
plotMonthlyPivotLevels = input.bool(true, title="Plot Monthly Pivot Levels")
plotWeeklyPivotLevels = input.bool(true, title="Plot Weekly Pivot Levels")
plotDailyPivotLevels = input.bool(true, title="Plot Daily Pivot Levels")
hideDailyAutomaticLevelsHigherThan = input.timeframe("15", title="Hide Daily Automatic Price Levels Above", tooltip="Specify the timeframe above which daily automatic price levels should be hidden.")
hideWeeklyAutomaticLevelsHigherThan = input.timeframe("60", title="Hide Weekly Automatic Price Levels Above", tooltip="Specify the timeframe above which weekly automatic price levels should be hidden.")
hideMonthlyAutomaticLevelsHigherThan = input.timeframe("D", title="Hide Monthly Automatic Price Levels Above", tooltip="Specify the timeframe above which monthly automatic price levels should be hidden.")
hideAllAutomaticLevelsHigherThan = input.timeframe("W", title="Hide All Automatic Price Levels Above", tooltip="Specify the timeframe above which all automatic price levels should be hidden.")
highPriceLevelColor  = input(color.rgb(8, 153, 129), title="High Price Level Color")
lowPriceLevelColor  = input(color.rgb(242, 54, 69), title="Low Price Level Color")
closePriceLevelColor  = input(color.rgb(243, 255, 138), title="Close Price Level Color")
openingPrintColor = input(color.rgb(243, 152, 15), title="Opening Print Color")
pivotLevelColor = input(color.rgb(182, 105, 197), title="Pivot Level Color")

var bool hideDailyAutomaticLevels = (timeframe.in_seconds(hideDailyAutomaticLevelsHigherThan) / 60) < (timeframe.in_seconds() / 60)
var bool hideWeeklyAutomaticLevels = (timeframe.in_seconds(hideWeeklyAutomaticLevelsHigherThan) / 60) < (timeframe.in_seconds() / 60)
var bool hideMonthlyAutomaticLevels = (timeframe.in_seconds(hideMonthlyAutomaticLevelsHigherThan) / 60) < (timeframe.in_seconds() / 60)
var bool hideAllAutomaticLevels = (timeframe.in_seconds(hideAllAutomaticLevelsHigherThan) / 60) < (timeframe.in_seconds() / 60)

if hideAllAutomaticLevels
    plotPrevMonthHighLowClose := false
    plotPrevWeekHighLowClose := false
    plotPrevDayHighLowClose := false
    plotMonthlyOpeningPrint := false
    plotWeeklyOpeningPrint := false
    plotDailyOpeningPrint := false
    plotYearlyPivotLevels := false
    plotMonthlyPivotLevels := false
    plotWeeklyPivotLevels := false
    plotDailyPivotLevels := false
else if hideMonthlyAutomaticLevels
    plotPrevMonthHighLowClose := false
    plotPrevWeekHighLowClose := false
    plotPrevDayHighLowClose := false
    plotMonthlyOpeningPrint := false
    plotWeeklyOpeningPrint := false
    plotDailyOpeningPrint := false
    plotMonthlyPivotLevels := false
    plotWeeklyPivotLevels := false
    plotDailyPivotLevels := false
else if hideWeeklyAutomaticLevels
    plotPrevDayHighLowClose := false
    plotWeeklyOpeningPrint := false
    plotPrevWeekHighLowClose := false
    plotDailyOpeningPrint := false
    plotWeeklyPivotLevels := false
    plotDailyPivotLevels := false
else if hideDailyAutomaticLevels
    plotPrevDayHighLowClose := false
    plotDailyOpeningPrint := false
    plotDailyPivotLevels := false

// --- Volume Calculations ---
volumeSMA = ta.sma(volume, volumeMetricLength)
higherVolumeThanPrev = volume > volume[1]
lowerVolumeThanPrev = volume < volume[1]
sufficientVolume = na(volume) ? true : volume > volumeSMA * acceptableVolumeThreshold
volumeLessThanMetric = volume < volumeSMA

// --- Price Action Calculations ---
body = math.abs(close - open)
bodyHigh = math.max(open, close)
bodyLow = math.min(open, close)
barRange = high - low 
upperWick = high - bodyHigh
lowerWick = bodyLow - low
greenCandle = close >= open
redCandle = close < open

// Calculate previous candle's range and midpoint (cached to avoid duplicate math)
prevCandleMidPoint = high[1] - (barRange[1] / 2)

// --- ATR Calculation using RTH only ---
var float atrSum = 0.0
var trArray = array.new_float(0)
isRTH = time(timeframe.period, "0930-1600:23456", "America/New_York") != 0 or timeframe.isdwm
trValue = ta.tr(true)
atrValue = 0.0
if isRTH
    atrSum += trValue
    array.push(trArray, trValue)
    if array.size(trArray) > atrLength
        removed = array.shift(trArray)
        atrSum -= removed
    atrValue := atrSum / array.size(trArray)
else
    atrValue := nz(atrValue[1])

sufficientVolatility = barRange >= atrValue * acceptableVolatilityThreshold

// --- Pre-computed Conditions ---
sufficientVolumeAndVolatility = sufficientVolume and sufficientVolatility

// --- Determine Candle Types ---
isDoji = showDojis and sufficientVolumeAndVolatility and (body <= barRange * dojiBodyToTotalRatio)
isInsideBar = showInsideBars and sufficientVolatility and (high <= high[1] and low >= low[1])
isNotDojiAndSufficient = not isDoji and sufficientVolumeAndVolatility

isHammer = showHammers and isNotDojiAndSufficient and (lowerWick >= body * hammerBodyToTotalRatio) and (upperWick <= barRange * shortWickToTotalRatio)
isShooter = showShooters and isNotDojiAndSufficient and (upperWick >= body * hammerBodyToTotalRatio) and (lowerWick <= barRange * shortWickToTotalRatio)

isBullishReversalBar = showReversalBar and isNotDojiAndSufficient and greenCandle and (high >= prevCandleMidPoint) and ((body * reversalBarShortWick) >= upperWick) and (redCandle[1] or (greenCandle[1] and body >= body[1] * 5))
isBearishReversalBar = showReversalBar and isNotDojiAndSufficient and redCandle and (low <= prevCandleMidPoint) and ((body * reversalBarShortWick) >= lowerWick) and (greenCandle[1] or (redCandle[1] and body >= body[1] * 5))

notCandlestickIndication = not isDoji and not isHammer and not isShooter and not isInsideBar

// --- Volume Anomalies ---
isHighVolumeAnomalyCondition = showHVAnomalies and higherVolumeThanPrev and sufficientVolumeAndVolatility
bullishHighVolumeAnomaly = isHighVolumeAnomalyCondition and redCandle and redCandle[1] and (body < body[1])
bearishHighVolumeAnomaly = isHighVolumeAnomalyCondition and greenCandle and greenCandle[1] and (body < body[1])

isLowVolumeAnomalyCondition = showLVAnomalies and volumeLessThanMetric and lowerVolumeThanPrev and sufficientVolumeAndVolatility
bullishLowVolumeAnomaly = isLowVolumeAnomalyCondition and redCandle and redCandle[1] and (body > body[1])
bearishLowVolumeAnomaly = isLowVolumeAnomalyCondition and greenCandle and greenCandle[1] and (body > body[1])

bullishVolumeAnomaly = bullishHighVolumeAnomaly or bullishLowVolumeAnomaly
bearishVolumeAnomaly = bearishHighVolumeAnomaly or bearishLowVolumeAnomaly

getGaps(lookBack) =>
    map<int, string> gapsDict = map.new<int, string>()
    i = lookBack
    float atrSum = 0.0

    while i >= 0
        dailyOpen = open[i]
        dailyLow = low[i]
        dailyHigh = high[i]
        prevClose = close[i + 1]

        // Calculate ATR components for each candle
        if i < atrLength
            atrSum := atrSum + math.max(dailyHigh - dailyLow, math.max(math.abs(dailyHigh - prevClose), math.abs(dailyLow - prevClose)))

        // Check for gap
        if dailyOpen != prevClose
            // Store time based key with string value "originalGapHigh,originalGapLow:partialGapHigh,partialGapLow"
            gapHigh = str.tostring(math.max(dailyOpen, prevClose))
            gapLow = str.tostring(math.min(dailyOpen, prevClose))
            gapsDict.put(time[i], gapHigh + "," + gapLow + ":" + gapHigh + "," + gapLow)

        // Check if gaps are filled or partially filled
        keysToRemove = array.new_int(0)
        if not barstate.isrealtime[i]
            for [key, value] in gapsDict
                gapOriginalAndPartial = str.split(value, ":")
                partialGapHighAndLow = str.split(array.get(gapOriginalAndPartial, 1), ",")
                partialGapHigh = str.tonumber(array.get(partialGapHighAndLow, 0))
                partialGapLow = str.tonumber(array.get(partialGapHighAndLow, 1))
                // Check if gap is completely filled
                if dailyLow <= partialGapLow and dailyHigh >= partialGapHigh
                    array.push(keysToRemove, key)
                else
                    // Check for partial fill and update gap
                    if dailyLow > partialGapLow and dailyLow < partialGapHigh
                        partialGapHigh := dailyLow
                        gapsDict.put(key, array.get(gapOriginalAndPartial, 0) + ":" + str.tostring(partialGapHigh) + "," + str.tostring(partialGapLow))
                    if dailyHigh < partialGapHigh and dailyHigh > partialGapLow
                        partialGapLow := dailyHigh
                        gapsDict.put(key, array.get(gapOriginalAndPartial, 0) + ":" + str.tostring(partialGapHigh) + "," + str.tostring(partialGapLow))

        // Remove completely filled gaps
        for key in keysToRemove
            gapsDict.remove(key)

        i := i - 1

    // Remove gaps smaller than 10% of the ATR
    keysToRemove = array.new_int(0)
    atr = atrSum / atrLength

    for [key, value] in gapsDict
        gapOriginalAndPartial = str.split(value, ":")
        partialGapHighAndLow = str.split(array.get(gapOriginalAndPartial, 1), ",")
        gapSize = math.abs(str.tonumber(array.get(partialGapHighAndLow, 0)) - str.tonumber(array.get(partialGapHighAndLow, 1)))
        if gapSize < atr * 0.1
            array.push(keysToRemove, key)

    for key in keysToRemove
        gapsDict.remove(key)

    gapsDict

getSession() =>
    if session.ismarket
        "M"
    else if session.ispremarket
        "P"
    else
        "A"

getHighLowOpenClose() =>
    // TODO: To make automatic levels adjust during premarket, need to return previous or current values here accordingly. Would need to return current weekly values in premarket before a new week and same for month/day
    [high[1], low[1], open, close[1]]

getHigherTimeframeData(timeframe) =>
    request.security(syminfo.tickerid, timeframe, getHighLowOpenClose(), lookahead=barmerge.lookahead_on, calc_bars_count = 2)

// Determine if we need to execute the logic at open and close
var bool executedDailyLogic = false
var string prevMarketSession = getSession()
if barstate.islast
    currentSession = getSession()
    if (prevMarketSession == "P" and currentSession == "M") or (prevMarketSession == "M" and currentSession == "A")
        executedDailyLogic := false

var box[] boxIds = array.new_box()
var line[] lineIds = array.new_line()

clearBoxes() =>
    for id in boxIds
        if not na(id)
            box.delete(id)
    array.clear(boxIds)

clearLines() =>
    for id in lineIds
        if not na(id)
            line.delete(id)
    array.clear(lineIds)

// Calculate pivot levels given high, low, and close
calcPivots(_high, _low, _close) =>
    sr3 = _high - _low
    sr1 = sr3 * 0.382
    sr2 = sr3 * 0.618
    pp   = (_high + _low + _close) / 3
    r1   = pp + sr1
    s1   = pp - sr1
    r2   = pp + sr2
    s2   = pp - sr2
    r3   = pp + sr3
    s3   = pp - sr3
    [pp, r1, s1, r2, s2, r3, s3]

// Draw a level line and push its ID into lineIds
drawLevel(_level, _width, _color, _style) =>
    array.push(lineIds, line.new(bar_index, _level, bar_index + 1, _level, 
      xloc.bar_index, extend.both, color=_color, style=_style, width=_width))

// Execute this block only once on the last bar and if daily logic hasn't been executed
if not executedDailyLogic and barstate.islast
    clearLines()
    
    // ----- Daily Levels -----
    [prevDayHigh, prevDayLow, currentDayOpen, prevDayClose] = getHigherTimeframeData("D")
    if plotDailyPivotLevels
        [dailyPP, dailyR1, dailyS1, dailyR2, dailyS2, dailyR3, dailyS3] = calcPivots(prevDayHigh, prevDayLow, prevDayClose)
        drawLevel(dailyPP, 1, pivotLevelColor, line.style_solid)
        drawLevel(dailyR1, 1, pivotLevelColor, line.style_solid)
        drawLevel(dailyS1, 1, pivotLevelColor, line.style_solid)
        drawLevel(dailyR2, 1, pivotLevelColor, line.style_solid)
        drawLevel(dailyS2, 1, pivotLevelColor, line.style_solid)
        drawLevel(dailyR3, 1, pivotLevelColor, line.style_solid)
        drawLevel(dailyS3, 1, pivotLevelColor, line.style_solid)
    if plotPrevDayHighLowClose
        drawLevel(prevDayHigh, 2, highPriceLevelColor, line.style_dotted)
        drawLevel(prevDayLow, 2, lowPriceLevelColor, line.style_dotted)
        drawLevel(prevDayClose, 2, closePriceLevelColor, line.style_dotted)
    if plotDailyOpeningPrint
        drawLevel(currentDayOpen, 2, openingPrintColor, line.style_dotted)
    
    // ----- Weekly Levels -----
    [prevWeekHigh, prevWeekLow, currentWeekOpen, prevWeekClose] = getHigherTimeframeData("W")
    if plotWeeklyPivotLevels
        [weeklyPP, weeklyR1, weeklyS1, weeklyR2, weeklyS2, weeklyR3, weeklyS3] = calcPivots(prevWeekHigh, prevWeekLow, prevWeekClose)
        drawLevel(weeklyPP, 2, pivotLevelColor, line.style_solid)
        drawLevel(weeklyR1, 2, pivotLevelColor, line.style_solid)
        drawLevel(weeklyS1, 2, pivotLevelColor, line.style_solid)
        drawLevel(weeklyR2, 2, pivotLevelColor, line.style_solid)
        drawLevel(weeklyS2, 2, pivotLevelColor, line.style_solid)
        drawLevel(weeklyR3, 2, pivotLevelColor, line.style_solid)
        drawLevel(weeklyS3, 2, pivotLevelColor, line.style_solid)
    if plotPrevWeekHighLowClose
        drawLevel(prevWeekHigh, 3, highPriceLevelColor, line.style_dotted)
        drawLevel(prevWeekLow, 3, lowPriceLevelColor, line.style_dotted)
        drawLevel(prevWeekClose, 3, closePriceLevelColor, line.style_dotted)
    if plotWeeklyOpeningPrint
        drawLevel(currentWeekOpen, 3, openingPrintColor, line.style_dotted)
    
    // ----- Monthly Levels -----
    [prevMonthHigh, prevMonthLow, currentMonthOpen, prevMonthClose] = getHigherTimeframeData("M")
    if plotMonthlyPivotLevels
        [monthlyPP, monthlyR1, monthlyS1, monthlyR2, monthlyS2, monthlyR3, monthlyS3] = calcPivots(prevMonthHigh, prevMonthLow, prevMonthClose)
        drawLevel(monthlyPP, 3, pivotLevelColor, line.style_solid)
        drawLevel(monthlyR1, 3, pivotLevelColor, line.style_solid)
        drawLevel(monthlyS1, 3, pivotLevelColor, line.style_solid)
        drawLevel(monthlyR2, 3, pivotLevelColor, line.style_solid)
        drawLevel(monthlyS2, 3, pivotLevelColor, line.style_solid)
        drawLevel(monthlyR3, 3, pivotLevelColor, line.style_solid)
        drawLevel(monthlyS3, 3, pivotLevelColor, line.style_solid)
    if plotPrevMonthHighLowClose
        drawLevel(prevMonthHigh, 5, highPriceLevelColor, line.style_dotted)
        drawLevel(prevMonthLow, 5, lowPriceLevelColor, line.style_dotted)
        drawLevel(prevMonthClose, 5, closePriceLevelColor, line.style_dotted)
    if plotMonthlyOpeningPrint
        drawLevel(currentMonthOpen, 5, openingPrintColor, line.style_dotted)
    
    // ----- Yearly Levels -----
    if plotYearlyPivotLevels
        [prevYearHigh, prevYearLow, currentYearOpen, prevYearClose] = getHigherTimeframeData("12M")
        [yearlyPP, yearlyR1, yearlyS1, yearlyR2, yearlyS2, yearlyR3, yearlyS3] = calcPivots(prevYearHigh, prevYearLow, prevYearClose)
        drawLevel(yearlyPP, 5, pivotLevelColor, line.style_solid)
        drawLevel(yearlyR1, 5, pivotLevelColor, line.style_solid)
        drawLevel(yearlyS1, 5, pivotLevelColor, line.style_solid)
        drawLevel(yearlyR2, 5, pivotLevelColor, line.style_solid)
        drawLevel(yearlyS2, 5, pivotLevelColor, line.style_solid)
        drawLevel(yearlyR3, 5, pivotLevelColor, line.style_solid)
        drawLevel(yearlyS3, 5, pivotLevelColor, line.style_solid)

    // Plot daily gaps
    if timeframe.isintraday or timeframe.isdaily
        if showDailyGaps
            clearBoxes()
            gapEnd = time + timeframe.in_seconds()
            dailyGaps = request.security(syminfo.tickerid, "D", not executedDailyLogic and barstate.islast ? getGaps(gapLookback) : map.new<int, string>(), lookahead=barmerge.lookahead_on, calc_bars_count = gapLookback)
            for [key, value] in dailyGaps
                gapOriginalAndPartial = str.split(value, ":")
                gapHighAndLow = str.split(array.get(gapOriginalAndPartial, usePartialFill ? 1 : 0), ",")
                gapHigh = str.tonumber(array.get(gapHighAndLow, 0))
                gapLow = str.tonumber(array.get(gapHighAndLow, 1))
                array.push(lineIds, line.new(key, gapHigh, gapEnd, gapHigh, width=dailyGapBorderWidth, color=dailyGapBorderColor, extend=extend.right, xloc=xloc.bar_time))
                array.push(lineIds, line.new(key, gapLow, gapEnd, gapLow, width=dailyGapBorderWidth, color=dailyGapBorderColor, extend=extend.right, xloc=xloc.bar_time))
                array.push(boxIds, box.new(key, gapHigh, gapEnd, gapLow, border_width=0, extend=extend.right, xloc=xloc.bar_time, bgcolor=dailyGapColor))
            executedDailyLogic := true

if barstate.islast
    prevMarketSession := getSession()

// Pre-calculate combined conditions to avoid recalculation each plotshape call
hammerNoBVA   = isHammer and not bullishVolumeAnomaly
shooterNoBVA  = isShooter and not bearishVolumeAnomaly
notInsideBar  = not isInsideBar

// Plot Hammers
plotshape(hammerNoBVA and notInsideBar, style=shape.triangleup, location=location.belowbar, 
     color=color.rgb(211,48,176), textcolor=color.rgb(255,255,255), text="H")

plotshape(hammerNoBVA and isInsideBar, style=shape.triangleup, location=location.belowbar, 
     color=color.rgb(211,48,176), textcolor=color.rgb(255,255,255), text="HI")

plotshape(isHammer and bullishVolumeAnomaly and notInsideBar, style=shape.triangleup, location=location.belowbar, 
     color=color.rgb(211,48,176), textcolor=color.rgb(255,255,255), text="HA")

// Plot Shooters
plotshape(shooterNoBVA and notInsideBar, style=shape.triangledown, location=location.abovebar, 
     color=color.rgb(255,155,93), textcolor=color.rgb(255,255,255), text="S")

plotshape(shooterNoBVA and isInsideBar, style=shape.triangledown, location=location.abovebar, 
     color=color.rgb(255,155,93), textcolor=color.rgb(255,255,255), text="SI")

plotshape(isShooter and bearishVolumeAnomaly and notInsideBar, style=shape.triangledown, location=location.abovebar, 
     color=color.rgb(255,155,93), textcolor=color.rgb(255,255,255), text="SA")

// Plot Dojis
plotshape(isDoji and not higherVolumeThanPrev and notInsideBar, style=shape.triangledown, location=location.abovebar, 
     color=color.rgb(145, 145, 145), textcolor=color.rgb(255,255,255), text="D")

plotshape(isDoji and isInsideBar, style=shape.triangledown, location=location.abovebar, 
     color=color.rgb(145, 145, 145), textcolor=color.rgb(255,255,255), text="DI")

plotshape(isDoji and higherVolumeThanPrev and notInsideBar, style=shape.triangledown, location=location.abovebar, 
     color=color.rgb(145, 145, 145), textcolor=color.rgb(255,255,255), text="DA")

// Plot Inside Bars
plotshape(isInsideBar and not isDoji and not isShooter and not isHammer and not isBearishReversalBar and not isBullishReversalBar, 
     style=shape.triangledown, location=location.abovebar, color=color.rgb(46, 119, 255), 
     textcolor=color.rgb(255,255,255), text="I")

// Plot Reversal Bars
plotshape(isBearishReversalBar and not isShooter and notInsideBar, 
     style=shape.triangledown, location=location.abovebar, color=color.rgb(201, 51, 51), 
     textcolor=color.rgb(255,255,255), text="R")

plotshape(isBearishReversalBar and not isShooter and isInsideBar, 
     style=shape.triangledown, location=location.abovebar, color=color.rgb(201, 51, 51), 
     textcolor=color.rgb(255,255,255), text="RI")

plotshape(isBullishReversalBar and not isHammer and notInsideBar, 
     style=shape.triangleup, location=location.belowbar, color=color.rgb(0, 151, 8), 
     textcolor=color.rgb(255,255,255), text="R")

plotshape(isBullishReversalBar and not isHammer and isInsideBar, 
     style=shape.triangleup, location=location.belowbar, color=color.rgb(0, 151, 8), 
     textcolor=color.rgb(255,255,255), text="RI")

// Plot Volume Anomalies
plotshape(bullishHighVolumeAnomaly and notCandlestickIndication, location=location.belowbar, 
     color=color.rgb(255,238,88), style=shape.triangleup, textcolor=color.rgb(255,255,255), text="A")

plotshape(bearishHighVolumeAnomaly and notCandlestickIndication, location=location.abovebar, 
     color=color.rgb(255,238,88), style=shape.triangledown, textcolor=color.rgb(255,255,255), text="A")

plotshape(bullishLowVolumeAnomaly and notCandlestickIndication, location=location.belowbar, 
     color=color.rgb(255,238,88), style=shape.triangleup, textcolor=color.rgb(255,255,255), text="A")

plotshape(bearishLowVolumeAnomaly and notCandlestickIndication, location=location.abovebar, 
     color=color.rgb(255,238,88), style=shape.triangledown, textcolor=color.rgb(255,255,255), text="A")