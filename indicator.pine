// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/

//@version=5
indicator("Volume Price Analysis Indicator", shorttitle="VPA Indicator", overlay=true, max_bars_back=500, max_lines_count=500, max_labels_count=500)

// User Inputs
showHammers = input.bool(true, title="Show Hammers")
showShooters = input.bool(true, title="Show Shooters")
hammerBodyToTotalRatio = input(1.5, title="Hammer/Shooter Long Wick to Body Ratio", tooltip="Set the ratio of the long wick to the body for identifying hammers and shooters.")
upperWickToBodyRatio = input(1.0, title="Hammer/Shooter Short Wick to Body Ratio", tooltip="Set the ratio of the short wick to the body for identifying hammers and shooters.")
showDojis = input.bool(true, title="Show Dojis")
dojiBodyToTotalRatio = input(0.13, title="Doji Body to High/Low Ratio", tooltip="Set the maximum body-to-high/low ratio for identifying doji candlesticks.")
showMomentum = input.bool(true, title="Show Momentum")
atrThreshold = input(1.5, title="Momentum Bar ATR Threshold", tooltip="Set the threshold for identifying momentum candlesticks as a multiple of the ATR (e.g., 1.5x ATR).")
atrLength = input(14, title="ATR Length", tooltip="Set the length of the ATR calculation.")
acceptableVolatilityThreshold = input(0.5, title="Acceptable Volatility Threshold", tooltip="Set the minimum volatility threshold as a multiple of the ATR (e.g., 0.5x ATR). Candlesticks with volatility below this threshold will not display candlestick indications.")
showHVAnomalies = input.bool(true, title="Show High Volume Anomalies")
showLVAnomalies = input.bool(true, title="Show Low Volume Anomalies")
acceptableVolumeThreshold = input(0.25, title="Acceptable Volume Threshold", tooltip="Set the minimum volume threshold as a multiple of the volume metric (e.g., 0.25x metric volume). Candlesticks with volume below this threshold will not display candlestick indications.")
volumeMetric = input.string("Baseline", title="Acceptable Volume Metric", options=['SMA', 'Baseline'], tooltip="Select the type of volume metric: Simple Moving Average (SMA) or the proprietary Baseline.")
volumeMetricLength = input.int(50, minval=10, maxval=500, title="Volume Metric Length", tooltip="Set the length for the volume metric calculation.")
volumeMedianSessionData = input.string("Extended", title="Volume Baseline Session Data", options=['Regular', 'Extended'], tooltip="Choose the session data type for calculating the volume baseline: Regular or Extended.")
futuresRegularSession = input("0830-1500:23456", title="Futures Regular Session", tooltip="Define the regular trading session hours for futures.")
showDailyGaps = input.bool(true, title="Show Daily Gaps")
gapLookback = input.int(200, minval=10, maxval=500, title="Gap Lookback", tooltip="Set the lookback period for identifying daily gaps.")
dailyGapColor = input(color.rgb(255, 255, 255, 95), title="Daily Gap Color")
dailyGapBorderColor = input(color.rgb(255, 255, 255, 30), title="Daily Gap Border Color")
dailyGapBorderWidth = input(2, title="Daily Gap Border Width", tooltip="Set the width of the border around daily gaps.")
plotPrevMonthHighLow = input.bool(true, title="Plot Previous Month High/Low")
plotPrevWeekHighLow = input.bool(true, title="Plot Previous Week High/Low")
plotPrevDayHighLow = input.bool(true, title="Plot Previous Day High/Low")
plotMonthlyOpeningPrint = input.bool(true, title="Plot Monthly Opening Print")
plotWeeklyOpeningPrint = input.bool(true, title="Plot Weekly Opening Print")
plotDailyOpeningPrint = input.bool(true, title="Plot Daily Opening Print")
plotYearlyPivotLevels = input.bool(true, title="Plot Yearly Pivot Levels")
plotMonthlyPivotLevels = input.bool(true, title="Plot Monthly Pivot Levels")
plotWeeklyPivotLevels = input.bool(true, title="Plot Weekly Pivot Levels")
plotDailyPivotLevels = input.bool(true, title="Plot Daily Pivot Levels")
hideDailyAutomaticLevelsHigherThan = input.timeframe("15", title="Hide Daily Automatic Price Levels Above", tooltip="Specify the timeframe above which daily automatic price levels should be hidden.")
hideWeeklyAutomaticLevelsHigherThan = input.timeframe("60", title="Hide Weekly Automatic Price Levels Above", tooltip="Specify the timeframe above which weekly automatic price levels should be hidden.")
hideMonthlyAutomaticLevelsHigherThan = input.timeframe("D", title="Hide Monthly Automatic Price Levels Above", tooltip="Specify the timeframe above which monthly automatic price levels should be hidden.")
hideAllAutomaticLevelsHigherThan = input.timeframe("W", title="Hide All Automatic Price Levels Above", tooltip="Specify the timeframe above which all automatic price levels should be hidden.")
highPriceLevelColor  = input(color.rgb(8, 153, 129), title="High Price Level Color")
lowPriceLevelColor  = input(color.rgb(242, 54, 69), title="Low Price Level Color")
openingPrintColor = input(color.rgb(243, 152, 15), title="Opening Print Color")
pivotLevelColor = input(color.rgb(240, 98, 146), title="Pivot Level Color")

var bool hideDailyAutomaticLevels = (timeframe.in_seconds(hideDailyAutomaticLevelsHigherThan) / 60) < (timeframe.in_seconds() / 60)
var bool hideWeeklyAutomaticLevels = (timeframe.in_seconds(hideWeeklyAutomaticLevelsHigherThan) / 60) < (timeframe.in_seconds() / 60)
var bool hideMonthlyAutomaticLevels = (timeframe.in_seconds(hideMonthlyAutomaticLevelsHigherThan) / 60) < (timeframe.in_seconds() / 60)
var bool hideAllAutomaticLevels = (timeframe.in_seconds(hideAllAutomaticLevelsHigherThan) / 60) < (timeframe.in_seconds() / 60)

if hideAllAutomaticLevels
    plotPrevMonthHighLow := false
    plotPrevWeekHighLow := false
    plotPrevDayHighLow := false
    plotMonthlyOpeningPrint := false
    plotWeeklyOpeningPrint := false
    plotDailyOpeningPrint := false
    plotYearlyPivotLevels := false
    plotMonthlyPivotLevels := false
    plotWeeklyPivotLevels := false
    plotDailyPivotLevels := false
else if hideMonthlyAutomaticLevels
    plotPrevMonthHighLow := false
    plotPrevWeekHighLow := false
    plotPrevDayHighLow := false
    plotMonthlyOpeningPrint := false
    plotWeeklyOpeningPrint := false
    plotDailyOpeningPrint := false
    plotMonthlyPivotLevels := false
    plotWeeklyPivotLevels := false
    plotDailyPivotLevels := false
else if hideWeeklyAutomaticLevels
    plotPrevDayHighLow := false
    plotWeeklyOpeningPrint := false
    plotPrevWeekHighLow := false
    plotDailyOpeningPrint := false
    plotWeeklyPivotLevels := false
    plotDailyPivotLevels := false
else if hideDailyAutomaticLevels
    plotPrevDayHighLow := false
    plotDailyOpeningPrint := false
    plotDailyPivotLevels := false

// Volume calculations
usingSMA = volumeMetric == "SMA"
volumeSMA = usingSMA ? ta.sma(volume, volumeMetricLength) : 0
higherVolumeThanPrev = volume > volume[1]
lowerVolumeThanPrev = volume < volume[1]

// Volume median calculation
medianVolume = 0.0
if not usingSMA
    var float[] regularMarketVolume = array.new_float(volumeMetricLength)
    var float[] extendedMarketVolume = array.new_float(volumeMetricLength)

    var bool isFuture = str.endswith(syminfo.ticker, "!") and syminfo.type == "futures"
    bool isFutureRegularSession = not na(time(timeframe.period, futuresRegularSession))
    
    if volumeMedianSessionData == "Extended" and (session.ispremarket or session.ispostmarket or (isFuture and (isFutureRegularSession or timeframe.isdwm)))
        if extendedMarketVolume.size() == volumeMetricLength
            extendedMarketVolume.shift()
        array.push(extendedMarketVolume, volume)
    else if (session.ismarket and not isFuture) or (isFuture and (isFutureRegularSession or timeframe.isdwm))
        if regularMarketVolume.size() == volumeMetricLength
            regularMarketVolume.shift()
        array.push(regularMarketVolume, volume)

    if volumeMedianSessionData == "Regular"
        medianVolume := array.median(regularMarketVolume)
    else if volumeMedianSessionData == "Extended"
        if (session.ismarket and not isFuture) or (isFuture and (isFutureRegularSession or timeframe.isdwm))
            medianVolume := array.median(regularMarketVolume)
        else
            medianVolume := array.median(extendedMarketVolume)
sufficientVolume = usingSMA ? volume > volumeSMA * acceptableVolumeThreshold : volume > medianVolume * acceptableVolumeThreshold
volumeLessThanMetric = usingSMA ? volume < volumeSMA : volume < medianVolume

if na(sufficientVolume)
    sufficientVolume := true

// Price action calculations
body = math.abs(close - open)
bodyHigh = math.max(open, close)
bodyLow = math.min(open, close)
highLow = math.abs(high - low)
upperWick = high - bodyHigh
lowerWick = bodyLow - low
prevCandleBody = math.abs(close[1] - open[1])
atrValue = ta.atr(atrLength)
sufficientVolatility = highLow >= atrValue * acceptableVolatilityThreshold
bodyGreaterThanMomentumATRThreshold = body > atrValue * atrThreshold
greenCandle = close > open
redCandle = close < open
candleMidpoint = (high - (high - low) / 2)

// Pre-computed conditions to avoid redundancy
sufficientVolumeAndVolatility = sufficientVolume and sufficientVolatility
isVolumeNAorHigher = na(volume) or higherVolumeThanPrev
isLowerVolumeThanPrevAndVolatility = lowerVolumeThanPrev and sufficientVolumeAndVolatility
isMomentumCandleCondition = showMomentum and sufficientVolume and isVolumeNAorHigher and bodyGreaterThanMomentumATRThreshold

// Determine candle types
isDoji = showDojis and sufficientVolumeAndVolatility and body <= highLow * dojiBodyToTotalRatio
isNotDojiAndSufficient = not isDoji and sufficientVolumeAndVolatility
isHammer = showHammers and isNotDojiAndSufficient and lowerWick >= body * hammerBodyToTotalRatio and bodyLow >= candleMidpoint and upperWick <= body * upperWickToBodyRatio
isShooter = showShooters and isNotDojiAndSufficient and upperWick >= body * hammerBodyToTotalRatio and bodyHigh <= candleMidpoint and lowerWick <= body * upperWickToBodyRatio
bullishMomentumCandle = isMomentumCandleCondition and greenCandle and upperWick < body
bearishMomentumCandle = isMomentumCandleCondition and redCandle and lowerWick < body
notDojiHammerOrShooter = not isDoji and not isHammer and not isShooter

// High volume anomalies
isHighVolumeAnomalyCondition = showHVAnomalies and higherVolumeThanPrev and sufficientVolumeAndVolatility
bullishHighVolumeAnomaly = isHighVolumeAnomalyCondition and redCandle and close[1] < open[1] and body < prevCandleBody
bearishHighVolumeAnomaly = isHighVolumeAnomalyCondition and greenCandle and close[1] > open[1] and body < prevCandleBody

// Low volume anomalies
isLowVolumeAnomalyCondition = showLVAnomalies and volumeLessThanMetric and isLowerVolumeThanPrevAndVolatility and bodyGreaterThanMomentumATRThreshold
bullishLowVolumeAnomaly = isLowVolumeAnomalyCondition and redCandle
bearishLowVolumeAnomaly = isLowVolumeAnomalyCondition and greenCandle

// Volume Anomalies
bullishVolumeAnomaly = bullishHighVolumeAnomaly or bullishLowVolumeAnomaly
bearishVolumeAnomaly = bearishHighVolumeAnomaly or bearishLowVolumeAnomaly

getGaps(lookBack) =>
    map<int, string> gapsDict = map.new<int, string>()
    i = lookBack
    float atrSum = 0.0

    while i >= 0
        dailyOpen = open[i]
        dailyLow = low[i]
        dailyHigh = high[i]
        prevClose = close[i + 1]

        // Calculate ATR components for each candle
        if i < atrLength
            tr = math.max(dailyHigh - dailyLow, math.max(math.abs(dailyHigh - prevClose), math.abs(dailyLow - prevClose)))
            atrSum := atrSum + tr

        // Check for gap
        if dailyOpen != prevClose
            gapsDict.put(time[i], str.tostring(math.max(dailyOpen, prevClose)) + "," + str.tostring(math.min(dailyOpen, prevClose)))

        // Check if gaps are filled or partially filled
        keysToRemove = array.new_int(0)
        if not barstate.isrealtime[i]
            for [key, value] in gapsDict
                gapHighAndLow = str.split(value, ",")
                gapHigh = str.tonumber(array.get(gapHighAndLow, 0))
                gapLow = str.tonumber(array.get(gapHighAndLow, 1))
                // Check if gap is completely filled
                if dailyLow <= gapLow and dailyHigh >= gapHigh
                    array.push(keysToRemove, key)
                else
                    // Check for partial fill and update gap
                    if dailyLow > gapLow and dailyLow < gapHigh
                        gapHigh := dailyLow
                        gapsDict.put(key, str.tostring(gapHigh) + "," + str.tostring(gapLow))
                    if dailyHigh < gapHigh and dailyHigh > gapLow
                        gapLow := dailyHigh
                        gapsDict.put(key, str.tostring(gapHigh) + "," + str.tostring(gapLow))

        // Remove completely filled gaps
        for key in keysToRemove
            gapsDict.remove(key)

        i := i - 1

    // Remove gaps smaller than 10% of the ATR
    keysToRemove = array.new_int(0)
    atr = atrSum / atrLength

    for [key, value] in gapsDict
        gapHighAndLow = str.split(value, ",")
        gapSize = math.abs(str.tonumber(array.get(gapHighAndLow, 0)) - str.tonumber(array.get(gapHighAndLow, 1)))
        if gapSize < atr * 0.1
            array.push(keysToRemove, key)

    for key in keysToRemove
        gapsDict.remove(key)

    gapsDict

getSession() =>
    if session.ismarket
        "M"
    else if session.ispremarket
        "P"
    else
        "A"

getHighLowOpenClose() =>
    [high[1], low[1], open, close[1]]

getHigherTimeframeData(timeframe) =>
    request.security(syminfo.tickerid, timeframe, getHighLowOpenClose(), lookahead=barmerge.lookahead_on)

// Determine if we need to execute the logic at open and close
var bool executedDailyLogic = false
var string prevMarketSession = getSession()
if barstate.islast
    currentSession = getSession()
    if (prevMarketSession == "P" and currentSession == "M") or (prevMarketSession == "M" and currentSession == "A")
        executedDailyLogic := false

barIsLastAndNotExecutedDailyLogic = not executedDailyLogic and barstate.islast
dailyGaps = request.security(syminfo.tickerid, "D", barIsLastAndNotExecutedDailyLogic and showDailyGaps ? getGaps(gapLookback) : map.new<int, string>(), lookahead=barmerge.lookahead_on)

var box[] boxIds = array.new_box()
var line[] lineIds = array.new_line()

clearBoxes() =>
    for id in boxIds
        if not na(id)
            box.delete(id)
    array.clear(boxIds)

clearLines() =>
    for id in lineIds
        if not na(id)
            line.delete(id)
    array.clear(lineIds)

// Plot automatic levels and daily gaps
if barIsLastAndNotExecutedDailyLogic
    clearLines()
    // Plot daily automatic levels
    [prevDayHigh, prevDayLow, currentDayOpen, prevDayClose] = getHigherTimeframeData("D")
    if plotDailyPivotLevels
        dailySR3 = prevDayHigh - prevDayLow
        dailySR1 = dailySR3 * 0.382
        dailySR2 = dailySR3 * 0.618
        dailyPivotPP = (prevDayHigh + prevDayLow + prevDayClose) / 3
        dailyPivotR1 = dailyPivotPP + dailySR1
        dailyPivotS1 = dailyPivotPP - dailySR1
        dailyPivotR2 = dailyPivotPP + dailySR2
        dailyPivotS2 = dailyPivotPP - dailySR2
        dailyPivotR3 = dailyPivotPP + dailySR3
        dailyPivotS3 = dailyPivotPP - dailySR3
        array.push(lineIds, line.new(bar_index, dailyPivotPP, bar_index + 1, dailyPivotPP, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid))
        array.push(lineIds, line.new(bar_index, dailyPivotR1, bar_index + 1, dailyPivotR1, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid))
        array.push(lineIds, line.new(bar_index, dailyPivotS1, bar_index + 1, dailyPivotS1, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid))
        array.push(lineIds, line.new(bar_index, dailyPivotR2, bar_index + 1, dailyPivotR2, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid))
        array.push(lineIds, line.new(bar_index, dailyPivotS2, bar_index + 1, dailyPivotS2, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid))
        array.push(lineIds, line.new(bar_index, dailyPivotR3, bar_index + 1, dailyPivotR3, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid))
        array.push(lineIds, line.new(bar_index, dailyPivotS3, bar_index + 1, dailyPivotS3, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid))
    if plotPrevDayHighLow
        array.push(lineIds, line.new(bar_index, prevDayHigh, bar_index + 1, prevDayHigh, xloc.bar_index, extend.both, color = highPriceLevelColor, style = line.style_dotted, width = 2))
        array.push(lineIds, line.new(bar_index, prevDayLow, bar_index + 1, prevDayLow, xloc.bar_index, extend.both, color = lowPriceLevelColor, style = line.style_dotted, width = 2))
    if plotDailyOpeningPrint
        array.push(lineIds, line.new(bar_index, currentDayOpen, bar_index + 1, currentDayOpen, xloc.bar_index, extend.both, color = openingPrintColor, style = line.style_dotted, width = 2))
    
    // Plot weekly automatic levels
    [prevWeekHigh, prevWeekLow, currentWeekOpen, prevWeekClose] = getHigherTimeframeData("W")
    if plotWeeklyPivotLevels
        weeklySR3 = prevWeekHigh - prevWeekLow
        weeklySR1 = weeklySR3 * 0.382
        weeklySR2 = weeklySR3 * 0.618
        weeklyPivotPP = (prevWeekHigh + prevWeekLow + prevWeekClose) / 3
        weeklyPivotR1 = weeklyPivotPP + weeklySR1
        weeklyPivotS1 = weeklyPivotPP - weeklySR1
        weeklyPivotR2 = weeklyPivotPP + weeklySR2
        weeklyPivotS2 = weeklyPivotPP - weeklySR2
        weeklyPivotR3 = weeklyPivotPP + weeklySR3
        weeklyPivotS3 = weeklyPivotPP - weeklySR3
        array.push(lineIds, line.new(bar_index, weeklyPivotPP, bar_index + 1, weeklyPivotPP, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid, width = 2))
        array.push(lineIds, line.new(bar_index, weeklyPivotR1, bar_index + 1, weeklyPivotR1, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid, width = 2))
        array.push(lineIds, line.new(bar_index, weeklyPivotS1, bar_index + 1, weeklyPivotS1, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid, width = 2))
        array.push(lineIds, line.new(bar_index, weeklyPivotR2, bar_index + 1, weeklyPivotR2, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid, width = 2))
        array.push(lineIds, line.new(bar_index, weeklyPivotS2, bar_index + 1, weeklyPivotS2, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid, width = 2))
        array.push(lineIds, line.new(bar_index, weeklyPivotR3, bar_index + 1, weeklyPivotR3, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid, width = 2))
        array.push(lineIds, line.new(bar_index, weeklyPivotS3, bar_index + 1, weeklyPivotS3, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid, width = 2))
    if plotPrevWeekHighLow
        array.push(lineIds, line.new(bar_index, prevWeekHigh, bar_index + 1, prevWeekHigh, xloc.bar_index, extend.both, color = highPriceLevelColor, style = line.style_dotted, width = 3))
        array.push(lineIds, line.new(bar_index, prevWeekLow, bar_index + 1, prevWeekLow, xloc.bar_index, extend.both, color = lowPriceLevelColor, style = line.style_dotted, width = 3))
    if plotWeeklyOpeningPrint
        array.push(lineIds, line.new(bar_index, currentWeekOpen, bar_index + 1, currentWeekOpen, xloc.bar_index, extend.both, color = openingPrintColor, style = line.style_dotted, width = 3))

    // Plot monthly automatic levels
    [prevMonthHigh, prevMonthLow, currentMonthOpen, prevMonthClose] = getHigherTimeframeData("M")
    if plotMonthlyPivotLevels
        monthlySR3 = prevMonthHigh - prevMonthLow
        monthlySR1 = monthlySR3 * 0.382
        monthlySR2 = monthlySR3 * 0.618
        monthlyPivotPP = (prevMonthHigh + prevMonthLow + prevMonthClose) / 3
        monthlyPivotR1 = monthlyPivotPP + monthlySR1
        monthlyPivotS1 = monthlyPivotPP - monthlySR1
        monthlyPivotR2 = monthlyPivotPP + monthlySR2
        monthlyPivotS2 = monthlyPivotPP - monthlySR2
        monthlyPivotR3 = monthlyPivotPP + monthlySR3
        monthlyPivotS3 = monthlyPivotPP - monthlySR3
        array.push(lineIds, line.new(bar_index, monthlyPivotPP, bar_index + 1, monthlyPivotPP, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid, width = 3))
        array.push(lineIds, line.new(bar_index, monthlyPivotR1, bar_index + 1, monthlyPivotR1, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid, width = 3))
        array.push(lineIds, line.new(bar_index, monthlyPivotS1, bar_index + 1, monthlyPivotS1, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid, width = 3))
        array.push(lineIds, line.new(bar_index, monthlyPivotR2, bar_index + 1, monthlyPivotR2, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid, width = 3))
        array.push(lineIds, line.new(bar_index, monthlyPivotS2, bar_index + 1, monthlyPivotS2, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid, width = 3))
        array.push(lineIds, line.new(bar_index, monthlyPivotR3, bar_index + 1, monthlyPivotR3, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid, width = 3))
        array.push(lineIds, line.new(bar_index, monthlyPivotS3, bar_index + 1, monthlyPivotS3, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid, width = 3))
    if plotPrevMonthHighLow
        array.push(lineIds, line.new(bar_index, prevMonthHigh, bar_index + 1, prevMonthHigh, xloc.bar_index, extend.both, color = highPriceLevelColor, style = line.style_dotted, width = 5))
        array.push(lineIds, line.new(bar_index, prevMonthLow, bar_index + 1, prevMonthLow, xloc.bar_index, extend.both, color = lowPriceLevelColor, style = line.style_dotted, width = 5))
    if plotMonthlyOpeningPrint
        array.push(lineIds, line.new(bar_index, currentMonthOpen, bar_index + 1, currentMonthOpen, xloc.bar_index, extend.both, color = openingPrintColor, style = line.style_dotted, width = 5))
    
    // Plot yearly automatic levels
    if plotYearlyPivotLevels
        [prevYearHigh, prevYearLow, currentYearOpen, prevYearClose] = getHigherTimeframeData("12M")
        yearlySR3 = prevYearHigh - prevYearLow
        yearlySR1 = yearlySR3 * 0.382
        yearlySR2 = yearlySR3 * 0.618
        yearlyPivotPP = (prevYearHigh + prevYearLow + prevYearClose) / 3
        yearlyPivotR1 = yearlyPivotPP + yearlySR1
        yearlyPivotS1 = yearlyPivotPP - yearlySR1
        yearlyPivotR2 = yearlyPivotPP + yearlySR2
        yearlyPivotS2 = yearlyPivotPP - yearlySR2
        yearlyPivotR3 = yearlyPivotPP + yearlySR3
        yearlyPivotS3 = yearlyPivotPP - yearlySR3
        array.push(lineIds, line.new(bar_index, yearlyPivotPP, bar_index + 1, yearlyPivotPP, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid, width = 5))
        array.push(lineIds, line.new(bar_index, yearlyPivotR1, bar_index + 1, yearlyPivotR1, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid, width = 5))
        array.push(lineIds, line.new(bar_index, yearlyPivotS1, bar_index + 1, yearlyPivotS1, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid, width = 5))
        array.push(lineIds, line.new(bar_index, yearlyPivotR2, bar_index + 1, yearlyPivotR2, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid, width = 5))
        array.push(lineIds, line.new(bar_index, yearlyPivotS2, bar_index + 1, yearlyPivotS2, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid, width = 5))
        array.push(lineIds, line.new(bar_index, yearlyPivotR3, bar_index + 1, yearlyPivotR3, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid, width = 5))
        array.push(lineIds, line.new(bar_index, yearlyPivotS3, bar_index + 1, yearlyPivotS3, xloc.bar_index, extend.both, color = pivotLevelColor, style = line.style_solid, width = 5))

    // Plot daily gaps
    if timeframe.isintraday or timeframe.isdaily
        if showDailyGaps
            clearBoxes()
            gapEnd = time + timeframe.in_seconds()
            for [key, value] in dailyGaps
                gapHighAndLow = str.split(value, ",")
                gapHigh = str.tonumber(array.get(gapHighAndLow, 0))
                gapLow = str.tonumber(array.get(gapHighAndLow, 1))
                array.push(lineIds, line.new(key, gapHigh, gapEnd, gapHigh, width=dailyGapBorderWidth, color=dailyGapBorderColor, extend=extend.right, xloc=xloc.bar_time))
                array.push(lineIds, line.new(key, gapLow, gapEnd, gapLow, width=dailyGapBorderWidth, color=dailyGapBorderColor, extend=extend.right, xloc=xloc.bar_time))
                array.push(boxIds, box.new(key, gapHigh, gapEnd, gapLow, border_width=0, extend=extend.right, xloc=xloc.bar_time, bgcolor=dailyGapColor))
            executedDailyLogic := true

if barstate.islast
    prevMarketSession := getSession()

// Plot hammers
plotshape(showHammers and isHammer and not bullishVolumeAnomaly, style=shape.triangleup, location=location.belowbar, color=color.rgb(211, 48, 176), textcolor=color.rgb(255, 255, 255), text="H")
plotshape(showHammers and isHammer and bullishVolumeAnomaly, style=shape.triangleup, location=location.belowbar, color=color.rgb(211, 48, 176), textcolor=color.rgb(255, 255, 255), text="HA")

// Plot shooters
plotshape(showShooters and isShooter and not bearishVolumeAnomaly, style=shape.triangledown, location=location.abovebar, color=color.rgb(255, 155, 93), textcolor=color.rgb(255, 255, 255), text="S")
plotshape(showShooters and isShooter and bearishVolumeAnomaly, style=shape.triangledown, location=location.abovebar, color=color.rgb(255, 155, 93), textcolor=color.rgb(255, 255, 255), text="SA")

// Plots dojis
plotshape(showDojis and isDoji and not higherVolumeThanPrev, style=shape.triangledown, location=location.abovebar, color=color.rgb(201, 55, 55), textcolor=color.rgb(255, 255, 255), text="D")
plotshape(showDojis and isDoji and higherVolumeThanPrev, style=shape.triangledown, location=location.abovebar, color=color.rgb(201, 55, 55), textcolor=color.rgb(255, 255, 255), text="DA")

// Plot momentum candles
plotshape(showMomentum and bullishMomentumCandle, style=shape.triangleup, location=location.belowbar, color=color.rgb(51, 129, 201), textcolor=color.rgb(255, 255, 255), text="M")
plotshape(showMomentum and bearishMomentumCandle, style=shape.triangledown, location=location.abovebar, color=color.rgb(51, 129, 201), textcolor=color.rgb(255, 255, 255), text="M")

// Plot volume anomalies
plotshape(showHVAnomalies and bullishHighVolumeAnomaly and notDojiHammerOrShooter, location=location.belowbar, color=color.rgb(255, 238, 88), style=shape.triangleup, textcolor=color.rgb(255, 255, 255), text="A")
plotshape(showHVAnomalies and bearishHighVolumeAnomaly and notDojiHammerOrShooter, location=location.abovebar, color=color.rgb(255, 238, 88), style=shape.triangledown, textcolor=color.rgb(255, 255, 255), text="A")

plotshape(showLVAnomalies and bullishLowVolumeAnomaly and notDojiHammerOrShooter, location=location.belowbar, color=color.rgb(255, 238, 88), style=shape.triangleup, textcolor=color.rgb(255, 255, 255), text="A")
plotshape(showLVAnomalies and bearishLowVolumeAnomaly and notDojiHammerOrShooter, location=location.abovebar, color=color.rgb(255, 238, 88), style=shape.triangledown, textcolor=color.rgb(255, 255, 255), text="A")