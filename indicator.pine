// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© adobrusky

//@version=5
indicator("Volume Price Analysis Indicator", shorttitle="VPA Indicator", overlay=true)

// User Inputs
showHammers = input.bool(true, title="Show Hammers")
showShooters = input.bool(true, title="Show Shooters")
showDojis = input.bool(true, title="Show Dojis")
showMomentum = input.bool(true, title="Show Momentum Bars")
showHVAnomalies = input.bool(true, title="Show High Volume Anomalies")
showLVAnomalies = input.bool(true, title="Show Low Volume Anomalies")
showDailyGaps = input.bool(true, title="Show Daily Gaps")
volumeMetric = input.string("Median", title="Acceptable Volume Metric", options = ['SMA', 'Median'])
acceptableVolumeThreshold = input(0.75, title="Acceptable Volume Threshold")
highVolumeThreshold = input(2.0, title="High Volume Threshold")
volumeMetricLength = input.int(50, minval=10, maxval=500,title="Volume Metric Length")
volumeMedianSessionData = input.string("Extended", title = "Volume Median Session Data", options = ['Regular', 'Extended'])
futuresRegularSession = input("0830-1500:23456", title = "Futures Regular Session")
atrLength = input(14, title="ATR Length")
acceptableVolatilityThreshold = input(0.5, title="Acceptable Volatility Threshold")
atrThreshold = input(1.5, title="Momentum Bar ATR Threshold")
hammerBodyToTotalRatio = input(1.5, title="Hammer/Shooter Long Wick to Body Ratio")
upperWickToBodyRatio = input(1.0, title="Hammer/Shooter Short Wick to Body Ratio")
dojiBodyToTotalRatio = input(0.13, title="Doji Body to High/Low Ratio")
gapLookback = input.int(200, title="Daily Gap Lookback")
hideAutomaticLevelsHigherThan = input.timeframe("60", title = "Hide Automatic Price Levels Higher Than Timeframe")
plotPrevMonthHighLow = input.bool(true, title="Plot Previous Month High/Low")
plotPrevWeekHighLow = input.bool(true, title="Plot Previous Week High/Low")
plotPrevDayHighLow = input.bool(true, title="Plot Previous Day High/Low")
plotMonthlyOpeningPrint = input.bool(true, title="Plot Monthly Opening Print")
plotWeeklyOpeningPrint = input.bool(true, title="Plot Weekly Opening Print")
plotDailyOpeningPrint = input.bool(true, title="Plot Daily Opening Print")
highPriceLevelColor  = input(color.rgb(8, 153, 129), title="High Price Level Color")
lowPriceLevelColor  = input(color.rgb(242, 54, 69), title ="Low Price Level Color")
openingPrintColor = input(color.rgb(243, 152, 15), title="Opening Print Color")
dailyGapColor = input(color.rgb(242, 54, 69, 98), title="Daily Gap Color")
dailyGapBorderColor = input(color.rgb(242, 54, 69, 30), title="Daily Gap Border Color")

var bool hideAutomaticLevels = (timeframe.in_seconds(hideAutomaticLevelsHigherThan) / 60) < (timeframe.in_seconds() / 60)

if hideAutomaticLevels
    plotPrevMonthHighLow := false
    plotPrevWeekHighLow := false
    plotPrevDayHighLow := false
    plotMonthlyOpeningPrint := false
    plotWeeklyOpeningPrint := false
    plotDailyOpeningPrint := false

// Volume calculations
usingSMA = volumeMetric == "SMA"
volumeSMA = usingSMA ? ta.sma(volume, volumeMetricLength) : 0
higherVolumeThanPrev = volume > volume[1]
lowerVolumeThanPrev = volume < volume[1]

// Volume median calculation
medianVolume = 0.0
if not usingSMA
    var float[] regularMarketVolume = array.new_float(volumeMetricLength)
    var float[] extendedMarketVolume = array.new_float(volumeMetricLength)

    var bool isFuture = str.endswith(syminfo.ticker, "!") and syminfo.type == "futures"
    bool isFutureRegularSession = not na(time(timeframe.period, futuresRegularSession))
    if volumeMedianSessionData == "Extended" and (session.ispremarket or session.ispostmarket or (isFuture and not isFutureRegularSession))
        if extendedMarketVolume.size() == volumeMetricLength
            extendedMarketVolume.shift()
        array.push(extendedMarketVolume, volume)
    else if (session.ismarket and not isFuture) or (isFuture and isFutureRegularSession)
        if regularMarketVolume.size() == volumeMetricLength
            regularMarketVolume.shift()
        array.push(regularMarketVolume, volume)

    if volumeMedianSessionData == "Regular"
        medianVolume := array.median(regularMarketVolume)
    else if volumeMedianSessionData == "Extended"
        if (session.ismarket and not isFuture) or (isFuture and isFutureRegularSession)
            medianVolume := array.median(regularMarketVolume)
        else
            medianVolume := array.median(extendedMarketVolume)
sufficientVolume = usingSMA ? volume > volumeSMA * acceptableVolumeThreshold : volume > medianVolume * acceptableVolumeThreshold
highVolume = usingSMA ? volume > volumeSMA * highVolumeThreshold : volume > medianVolume * highVolumeThreshold
volumeLessThanMetric = usingSMA ? volume < volumeSMA : volume < medianVolume

if na(sufficientVolume)
    sufficientVolume := true

// Price action calculations
body = math.abs(close - open)
bodyHigh = math.max(open, close)
bodyLow = math.min(open, close)
highLow = math.abs(high - low)
upperWick = high - bodyHigh
lowerWick = bodyLow - low
prevCandleBody = math.abs(close[1] - open[1])
atrValue = ta.atr(atrLength)
sufficientVolatility = highLow >= atrValue * acceptableVolatilityThreshold
bodyGreaterThanMomentumATRThreshold = body > atrValue * atrThreshold
greenCandle = close > open
redCandle = close < open
candleMidpoint = (high - (high - low) / 2)

// Determine candle types
isDoji = showDojis and sufficientVolume and sufficientVolatility and body <= highLow * dojiBodyToTotalRatio
isHammer = showHammers and sufficientVolume and sufficientVolatility and not isDoji and lowerWick >= body * hammerBodyToTotalRatio and bodyLow >= candleMidpoint and upperWick <= body * upperWickToBodyRatio
isShooter = showShooters and sufficientVolume and sufficientVolatility and not isDoji and upperWick >= body * hammerBodyToTotalRatio and bodyHigh <= candleMidpoint and lowerWick <= body * upperWickToBodyRatio
bullishMomentumCandle = showMomentum and sufficientVolume and (na(volume) or higherVolumeThanPrev) and greenCandle and bodyGreaterThanMomentumATRThreshold and upperWick < body
bearishMomentumCandle = showMomentum and sufficientVolume and (na(volume) or higherVolumeThanPrev) and redCandle and bodyGreaterThanMomentumATRThreshold and lowerWick < body
bullishHighVolumeAnomaly = showHVAnomalies and redCandle and higherVolumeThanPrev and sufficientVolume and sufficientVolatility and close[1] < open[1] and body < prevCandleBody
bearishHighVolumeAnomaly = showHVAnomalies and greenCandle and higherVolumeThanPrev and sufficientVolume and sufficientVolatility and close[1] > open[1] and body < prevCandleBody
bullishLowVolumeAnomaly = showLVAnomalies and volumeLessThanMetric and redCandle and bodyGreaterThanMomentumATRThreshold and lowerVolumeThanPrev and sufficientVolume and sufficientVolatility
bearishLowVolumeAnomaly = showLVAnomalies and volumeLessThanMetric and greenCandle and bodyGreaterThanMomentumATRThreshold and lowerVolumeThanPrev and sufficientVolume and sufficientVolatility
bullishVolumeAnomaly = bullishHighVolumeAnomaly or bullishLowVolumeAnomaly
bearishVolumeAnomaly = bearishHighVolumeAnomaly or bearishLowVolumeAnomaly

// Pull in previous day, week, and month high/low
prevMonthHigh = plotPrevMonthHighLow ? request.security(syminfo.tickerid, "M", high[1], lookahead=barmerge.lookahead_on) : na
prevMonthLow = plotPrevMonthHighLow ? request.security(syminfo.tickerid, "M", low[1], lookahead=barmerge.lookahead_on) : na
prevWeekHigh = plotPrevWeekHighLow ? request.security(syminfo.tickerid, "W", high[1], lookahead=barmerge.lookahead_on) : na
prevWeekLow = plotPrevWeekHighLow ? request.security(syminfo.tickerid, "W", low[1], lookahead=barmerge.lookahead_on) : na
prevDayHigh = plotPrevDayHighLow ? request.security(syminfo.tickerid, "D", high[1], lookahead=barmerge.lookahead_on) : na
prevDayLow = plotPrevDayHighLow ? request.security(syminfo.tickerid, "D", low[1], lookahead=barmerge.lookahead_on) : na
monthlyOpeningPrint = plotMonthlyOpeningPrint ? request.security(syminfo.tickerid, "M", open, lookahead=barmerge.lookahead_on) : na
weeklyOpeningPrint = plotWeeklyOpeningPrint ? request.security(syminfo.tickerid, "W", open, lookahead=barmerge.lookahead_on) : na
dailyOpeningPrint = plotDailyOpeningPrint ? request.security(syminfo.tickerid, "D", open, lookahead=barmerge.lookahead_on) : na

getDailyGaps(lookBack) =>
    map<int, string> gapsDict = map.new<int, string>()
    i = lookBack
    float atrSum = 0.0

    while i >= 0
        dailyOpen = open[i]
        dailyLow = low[i]
        dailyHigh = high[i]
        prevClose = close[i + 1]

         // Calculate ATR components for each candle
        if i < atrLength
            tr = math.max(dailyHigh - dailyLow, math.max(math.abs(dailyHigh - prevClose), math.abs(dailyLow - prevClose)))
            atrSum := atrSum + tr

        // Check for gap
        if dailyOpen != prevClose
            gapsDict.put(bar_index - i, str.tostring(math.max(dailyOpen, prevClose)) + "," + str.tostring(math.min(dailyOpen, prevClose)))

        // Check if gaps are filled or partially filled
        keysToRemove = array.new_int(0)
        for [key, value] in gapsDict
            gapHighAndLow = str.split(value, ",")
            gapHigh = str.tonumber(array.get(gapHighAndLow, 0))
            gapLow = str.tonumber(array.get(gapHighAndLow, 1))
            // Check if gap is completely filled
            if dailyLow <= gapLow and dailyHigh >= gapHigh
                array.push(keysToRemove, key)
            else
                // Check for partial fill and update gap
                if dailyLow > gapLow and dailyLow < gapHigh
                    gapHigh := dailyLow
                    gapsDict.put(key, str.tostring(gapHigh) + "," + str.tostring(gapLow))
                if dailyHigh < gapHigh and dailyHigh > gapLow
                    gapLow := dailyHigh
                    gapsDict.put(key, str.tostring(gapHigh) + "," + str.tostring(gapLow))

        // Remove completely filled gaps
        for key in keysToRemove
            gapsDict.remove(key)

        i := i - 1

    // Remove gaps smaller than 10% of the ATR
    keysToRemove = array.new_int(0)
    atr = atrSum / atrLength

    for [key, value] in gapsDict
        gapHighAndLow = str.split(value, ",")
        gapSize = math.abs(str.tonumber(array.get(gapHighAndLow, 0)) - str.tonumber(array.get(gapHighAndLow, 1)))
        if gapSize < atr * 0.1
            array.push(keysToRemove, key)

    for key in keysToRemove
        gapsDict.remove(key)

    gapsDict

gaps = request.security(syminfo.tickerid, "D", showDailyGaps and barstate.islast ? getDailyGaps(gapLookback) : map.new<int, string>(), lookahead=barmerge.lookahead_on)

// Show Daily Gaps
if showDailyGaps and barstate.islast
    for [key, value] in gaps
        gapHighAndLow = str.split(value, ",")
        box.new(key, str.tonumber(array.get(gapHighAndLow, 0)), bar_index - 1, str.tonumber(array.get(gapHighAndLow, 1)), border_color=dailyGapBorderColor, border_width=1, border_style=line.style_solid, extend=extend.right, xloc=xloc.bar_index, bgcolor=dailyGapColor)

// Plot prev day, week, and month high/low and the monthly, weekly, and daily opening print
plot(prevMonthHigh, style=plot.style_circles, color=highPriceLevelColor, linewidth=5, trackprice = true, show_last = 1, offset = -99999)
plot(prevMonthLow, style=plot.style_circles, color=lowPriceLevelColor, linewidth=5, trackprice = true, show_last = 1, offset = -99999)
plot(prevWeekHigh, style=plot.style_circles, color=highPriceLevelColor, linewidth=3, trackprice = true, show_last = 1, offset = -99999)
plot(prevWeekLow, style=plot.style_circles, color=lowPriceLevelColor, linewidth=3, trackprice = true, show_last = 1, offset = -99999)
plot(prevDayHigh, style=plot.style_circles, color=highPriceLevelColor, linewidth=2, trackprice = true, show_last = 1, offset = -99999)
plot(prevDayLow, style=plot.style_circles, color=lowPriceLevelColor, linewidth=2, trackprice = true, show_last = 1, offset = -99999)
plot(monthlyOpeningPrint, style=plot.style_circles, color=openingPrintColor, linewidth=5, trackprice = true, show_last = 1, offset = -99999)
plot(weeklyOpeningPrint, style=plot.style_circles, color=openingPrintColor, linewidth=3, trackprice = true, show_last = 1, offset = -99999)
plot(dailyOpeningPrint, style=plot.style_circles, color=openingPrintColor, linewidth=2, trackprice = true, show_last = 1, offset = -99999)

// Plot hammers
plotshape(showHammers and isHammer and not highVolume and not bullishVolumeAnomaly, style=shape.triangleup, location=location.belowbar, color=color.rgb(211, 48, 176), textcolor=color.rgb(255, 255, 255), text="H")
plotshape(showHammers and isHammer and highVolume and not bullishVolumeAnomaly, style=shape.triangleup, location=location.belowbar, textcolor=color.rgb(255, 255, 255), color=color.rgb(211, 48, 176), text="H+")

plotshape(showHammers and isHammer and not highVolume and bullishVolumeAnomaly, style=shape.triangleup, location=location.belowbar, color=color.rgb(211, 48, 176), textcolor=color.rgb(255, 255, 255), text="HA")
plotshape(showHammers and isHammer and highVolume and bullishVolumeAnomaly, style=shape.triangleup, location=location.belowbar, textcolor=color.rgb(255, 255, 255), color=color.rgb(211, 48, 176), text="HA+")

// Plot shooters
plotshape(showShooters and isShooter and not highVolume and not bearishVolumeAnomaly, style=shape.triangledown, location=location.abovebar, color=color.rgb(255, 155, 93), textcolor=color.rgb(255, 255, 255), text="S")
plotshape(showShooters and isShooter and highVolume and not bearishVolumeAnomaly, style=shape.triangledown, location=location.abovebar, textcolor=color.rgb(255, 255, 255), color=color.rgb(255, 155, 93), text="S+")

plotshape(showShooters and isShooter and not highVolume and bearishVolumeAnomaly, style=shape.triangledown, location=location.abovebar, color=color.rgb(255, 155, 93), textcolor=color.rgb(255, 255, 255), text="SA")
plotshape(showShooters and isShooter and highVolume and bearishVolumeAnomaly, style=shape.triangledown, location=location.abovebar, textcolor=color.rgb(255, 255, 255), color=color.rgb(255, 155, 93), text="SA+")

// Plots dojis
plotshape(showDojis and isDoji and not highVolume and not higherVolumeThanPrev, style=shape.triangledown, location=location.abovebar, color=color.rgb(201, 55, 55), textcolor=color.rgb(255, 255, 255), text="D")
plotshape(showDojis and isDoji and highVolume and not higherVolumeThanPrev, style=shape.triangledown, location=location.abovebar, textcolor=color.rgb(255, 255, 255), color=color.rgb(201, 55, 55), text="D+")

plotshape(showDojis and isDoji and not highVolume and higherVolumeThanPrev, style=shape.triangledown, location=location.abovebar, color=color.rgb(201, 55, 55), textcolor=color.rgb(255, 255, 255), text="DA")
plotshape(showDojis and isDoji and highVolume and higherVolumeThanPrev, style=shape.triangledown, location=location.abovebar, textcolor=color.rgb(255, 255, 255), color=color.rgb(201, 55, 55), text="DA+")

// Plot momentum candles
plotshape(showMomentum and bullishMomentumCandle and not highVolume, style=shape.triangleup, location=location.belowbar, color=color.rgb(51, 129, 201), textcolor=color.rgb(255, 255, 255), text="M")
plotshape(showMomentum and bearishMomentumCandle and not highVolume, style=shape.triangledown, location=location.abovebar, color=color.rgb(51, 129, 201), textcolor=color.rgb(255, 255, 255), text="M")

plotshape(showMomentum and bullishMomentumCandle and highVolume, style=shape.triangleup, location=location.belowbar, color=color.rgb(51, 129, 201), textcolor=color.rgb(255, 255, 255), text="M+")
plotshape(showMomentum and bearishMomentumCandle and highVolume, style=shape.triangledown, location=location.abovebar, color=color.rgb(51, 129, 201), textcolor=color.rgb(255, 255, 255), text="M+")

// Plot volume anomalies
plotshape(showHVAnomalies and bullishHighVolumeAnomaly and not isDoji and not isHammer and not highVolume, location=location.belowbar, color=color.rgb(255, 238, 88), style=shape.triangleup, textcolor=color.rgb(255, 255, 255), text="A")
plotshape(showHVAnomalies and bearishHighVolumeAnomaly and not isDoji and not isShooter and not highVolume, location=location.abovebar, color=color.rgb(255, 238, 88), style=shape.triangledown, textcolor=color.rgb(255, 255, 255), text="A")

plotshape(showHVAnomalies and bullishHighVolumeAnomaly and not isDoji and not isHammer and highVolume, location=location.belowbar, color=color.rgb(255, 238, 88), style=shape.triangleup, textcolor=color.rgb(255, 255, 255), text="A+")
plotshape(showHVAnomalies and bearishHighVolumeAnomaly and not isDoji and not isShooter and highVolume, location=location.abovebar, color=color.rgb(255, 238, 88), style=shape.triangledown, textcolor=color.rgb(255, 255, 255), text="A+")

plotshape(showLVAnomalies and bullishLowVolumeAnomaly and not isDoji and not isHammer and not highVolume, location=location.belowbar, color=color.rgb(255, 238, 88), style=shape.triangleup, textcolor=color.rgb(255, 255, 255), text="A")
plotshape(showLVAnomalies and bearishLowVolumeAnomaly and not isDoji and not isShooter and not highVolume, location=location.abovebar, color=color.rgb(255, 238, 88), style=shape.triangledown, textcolor=color.rgb(255, 255, 255), text="A")

plotshape(showLVAnomalies and bullishLowVolumeAnomaly and not isDoji and not isHammer and highVolume, location=location.belowbar, color=color.rgb(255, 238, 88), style=shape.triangleup, textcolor=color.rgb(255, 255, 255), text="A+")
plotshape(showLVAnomalies and bearishLowVolumeAnomaly and not isDoji and not isShooter and highVolume, location=location.abovebar, color=color.rgb(255, 238, 88), style=shape.triangledown, textcolor=color.rgb(255, 255, 255), text="A+")